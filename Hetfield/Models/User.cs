// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using APIForHetfield;
using ScottPlot.Renderable;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using static System.Runtime.InteropServices.JavaScript.JSType;

namespace Hetfield.Models;

public partial class User : DbModelBase
{
    public int IdUser { get; set; }

    public string Surname { get; set; }

    public string Name { get; set; }

    public string Patronymic { get; set; }

    public DateTime DateOfBirth { get; set; }

    public string PhoneNumber { get; set; }

    public string Email { get; set; }

    public string Login { get; set; }

    public string Password { get; set; }

    public byte[] Photo { get; set; }

    public int IdRole { get; set; }

    public int IdGender { get; set; }

    [JsonIgnore]
    public virtual ICollection<CarsPassport> CarsPassports { get; set; } = new List<CarsPassport>();

    public virtual Gender IdGenderNavigation { get; set; }

    public virtual Role IdRoleNavigation { get; set; }

    [JsonIgnore]
    public virtual ICollection<Order> OrderIdBuyerNavigations { get; set; } = new List<Order>();
    [JsonIgnore]
    public virtual ICollection<Order> OrderIdStaffNavigations { get; set; } = new List<Order>();

    public override async Task<bool> Validate(bool addMode)
    {
        string message = string.Empty;
        if (Surname == null || Surname == string.Empty)
        {
            message = "Поле фамилии не заполнено";
        }
        if (Name == null || Surname == string.Empty)
        {
            message = "Поле имени не заполнено";
        }
        if (Patronymic == null || Surname == string.Empty)
        {
            message = "Поле отчества не заполнено";
        }
        if(DateOfBirth.Year <= 1910)
        {
            message = "В поле даты рождения введена невалидная информация. Проверьте дату рождения";
        }
        if (Email == null || Surname == string.Empty)
        {
            message = "Поле электронной почты не заполнено";
        }
        if (PhoneNumber == null || Surname == string.Empty)
        {
            message = "Поле Номера телефона не заполнено";
        }
        if (Login == null)
            Login = string.Empty;
        if (Login.Length < 8)
        {
            message = "Поле логина должно иметь минимум 8 значений";
        }
        if (Password == null)
            Password = string.Empty;
        if (Password.Length < 8)
        {
            message = "Поле пароля должно иметь минимум 8 значений";
        }
        if (IdRoleNavigation == null)
        {
            message = "Роль не выбрана";
        }
        else
        {
            IdRole = IdRoleNavigation.IdRole;
        }
        if (IdGenderNavigation == null)
        {
            message = "Пол не выбрана";
        }
        else
        {
            IdGender = IdGenderNavigation.IdGender;
        }
        ApiClient apiClient = new ApiClient();
        IEnumerable<User> users = await apiClient.GetAllEntityData<User>();
        if (users.Any(u => u.Login == Login) && addMode)
        {
            message = "Пользователь с таким логином уже есть в базе. Придумайте другой логин";
        }
        if (users.Any(u => u.PhoneNumber == PhoneNumber) && addMode)
        {
            message = "Пользователь с таким номером телефона уже есть в базе. Убедитесь в корректности ввода";
        }
        if(!addMode)
        {
            if (users.Any(u => u.Login == Login && u.IdUser != IdUser))
            {
                message = "Пользователь с таким логином уже есть в базе. Придумайте другой логин";
            }
            if (users.Any(u => u.PhoneNumber == PhoneNumber && u.IdUser != IdUser))
            {
                message = "Пользователь с таким номером телефона уже есть в базе. Убедитесь в корректности ввода";
            }
        }
        if (message != string.Empty)
        {
            return ValidateResult(message);
        }
        else
        {
            return true;
        }
    }

    public override string ToString()
    {
        return this.Surname + " " +
                this.Name + " " +
                this.Patronymic + " " +
                $"{this.DateOfBirth:d}" + " " +
                this.PhoneNumber + " " +
                this.Email + " " +
                this.Login + " " +
                this.Password + " " +
                this.IdRoleNavigation.RoleName + " " +
                this.IdGenderNavigation.GenderName;
    }
}