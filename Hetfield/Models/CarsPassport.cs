// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using APIForHetfield;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json.Serialization;
using System.Threading.Tasks;

namespace Hetfield.Models;

public partial class CarsPassport : DbModelBase
{
    public int IdCarPassport { get; set; }

    public int CarManufactureYear { get; set; }

    public int IdCarType { get; set; }

    public int IdCarColor { get; set; }

    public int IdOwner { get; set; }

    public string CarModel { get; set; }

    public string VinNumber { get; set; }

    public int CarPower { get; set; }

    public int EngineDisplacement { get; set; }

    public string PassportSeriasAndNumber { get; set; }

    public DateTime DateOfIssue { get; set; }

    public virtual ManufactureYear CarManufactureYearNavigation { get; set; }

    [JsonIgnore]
    public virtual ICollection<Car> Cars { get; set; } = new List<Car>();

    public virtual CarColor IdCarColorNavigation { get; set; }

    public virtual CarType IdCarTypeNavigation { get; set; }

    public virtual User IdOwnerNavigation { get; set; }

    private string ConvertCarModelInNormal(string carModel)
    {
        string copy = carModel;
        for (int i = 1; i < copy.Length; i++)
        {
            if (char.IsDigit(copy[i]) && char.IsDigit(copy[i - 1]))
                break;
            if (char.IsDigit(copy[i]) && copy[i - 1] != ' ')
            {
                copy = copy.Insert(i, " ");
                break;
            }
        }
        return copy;
    }

    public override async Task<bool> Validate(bool addMode)
    {
        string message = string.Empty;
        if (CarModel == null || CarModel == string.Empty)
            message = "Модель автомобиля не указана";
        else
            CarModel = ConvertCarModelInNormal(CarModel);
        if (VinNumber == null || VinNumber == string.Empty)
            message = "Vin-номер автомобиля не указана";
        if (CarPower == null || CarPower == 0)
            message = "Мощность автомобиля не указана";
        if (EngineDisplacement == null || EngineDisplacement == 0)
            message = "Объем двигателя автомобиля не указан";
        if (PassportSeriasAndNumber == null || PassportSeriasAndNumber.Length == 0)
            message = "Серия и номер ПТС не указаны";
        if (CarManufactureYearNavigation == null)
            message = "Год производства автомобиля не выбран";
        else
            CarManufactureYear = CarManufactureYearNavigation.YearValue;
        if (IdCarColorNavigation == null)
            message = "Цвет автомобиля не выбран";
        else
            IdCarColor = IdCarColorNavigation.IdCarColors;
        if (IdCarTypeNavigation == null)
            message = "Тип транспортного средства не выбран";
        else
            IdCarType = IdCarTypeNavigation.IdCarType;
        if (IdOwnerNavigation == null)
            message = "Владелец автомобиля не выбран";
        else
            IdOwner = IdOwnerNavigation.IdUser;
        if (CarManufactureYearNavigation != null)
            if (DateOfIssue == null || DateOfIssue.Year < CarManufactureYearNavigation.YearValue)
                message = "Дата выдачи ПТС не введена или введена некорректно. Проверьте данные, выбранные в пункте год производства автомобиля.";
        ApiClient apiClient = new ApiClient();
        IEnumerable<CarsPassport> passports = await apiClient.GetAllEntityData<CarsPassport>();
        if (passports.Any(p => p.PassportSeriasAndNumber == PassportSeriasAndNumber) && addMode)
            message = "Автомобиль с такой же серией и номером ПТС уже есть в базе";
        if (!addMode)
        {
            if (passports.Any(p => p.PassportSeriasAndNumber == PassportSeriasAndNumber && p.IdCarPassport != IdCarPassport))
                message = "Автомобиль с такой же серией и номером ПТС уже есть в базе";
        }
        if (message != string.Empty)
            return ValidateResult(message);
        else
            return true;

    }
}